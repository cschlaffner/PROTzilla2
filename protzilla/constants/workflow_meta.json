{
  "importing": {
    "ms_data_import": {
      "max_quant_import": {
        "name": "Max Quant",
        "description": "Max Quant Data Import",
        "parameters": {
          "intensity_name": {
            "name": "intensity parameter",
            "type": "categorical",
            "categories": [
              "LFQ intensity",
              "Intensity",
              "iBAQ"
            ],
            "default": "Intensity"
          },
          "file_path": {
            "name": "MaxQuant intensities file:",
            "type": "file",
            "default": null
          }
        }
      },
      "ms_fragger_import": {
        "name": "MS Fragger",
        "description": "MS Fragger Data Import",
        "parameters": {
          "intensity_name": {
            "name": "intensity name",
            "type": "categorical",
            "categories": [
              "LFQ intensity",
              "Intensity",
              "iBAQ"
            ],
            "default": "Intensity"
          },
          "file_path": {
            "name": "MSFragger intensities file:",
            "type": "file",
            "default": null
          }
        }
      }
    },
    "metadata_import": {
      "metadata_import_method": {
        "name": "Metadata Import",
        "description": "Import Metadata",
        "parameters": {
          "feature_orientation": {
            "name": "feature orientation",
            "type": "categorical",
            "categories": [
              "Rows (features in rows, samples in columns)",
              "Columns (samples in rows, features in columns)"
            ],
            "default": "Columns (samples in rows, features in columns)"
          },
          "file_path": {
            "name": "Metadata file:",
            "type": "file",
            "default": null
          }
        }
      }
    }
  },
  "data_preprocessing": {
    "filter_proteins": {
      "low_frequency_filter": {
        "name": "Low Frequency",
        "description": "This function filters proteins with a low frequency of occurrence from\n    a protein dataframe based on a set threshold. The threshold is defined\n    by the relative amount of samples a protein is detected in.",
        "parameters": {
          "threshold": {
            "name": "Threshold for the relative amount of samples a protein is detected in:",
            "type": "numeric",
            "min": 0,
            "max": 1,
            "default": 0.5
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Bar chart"
            }
          }
        ]
      }
    },
    "filter_samples": {
      "protein_count_filter": {
        "name": "Protein Count",
        "description": "Filter by protein count per sample",
        "parameters": {
          "threshold": {
            "name": "Number of standard deviations from the median:",
            "type": "numeric",
            "min": 0,
            "default": 2
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Pie chart"
            }
          }
        ]
      },
      "protein_intensity_sum_filter": {
        "name": "Sum of Intensities",
        "description": "Filter by sum of protein intensities per sample",
        "parameters": {
          "threshold": {
            "name": "Number of standard deviations from the median:",
            "type": "numeric",
            "min": 0,
            "default": 2
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Pie chart"
            }
          }
        ]
      }
    },
    "outlier_detection": {
      "pca": {
        "name": "PCA",
        "description": "This function filters out outliers using a PCA\n    based approach based geometrical distance to the median\n    and returns a list of samples that are inliers.\n    Allows 2D (using an ellipse) or 3D (using an ellipsoid)\n    analysis.",
        "parameters": {
          "threshold": {
            "name": "Threshold for number of standard deviations from the median:",
            "type": "numeric",
            "min": 0,
            "default": 2
          },
          "number_of_components": {
            "name": "Number of components:",
            "type": "numeric",
            "min": 2,
            "max": 3,
            "step": 1,
            "default": 3
          }
        },
        "graphs": [
          {}
        ]
      },
      "isolation_forest": {
        "name": "Isolation Forest",
        "description": "This function filters out outliers using a clustering\n    isolation forest approach.",
        "parameters": {
          "n_estimators": {
            "name": "Number of estimators:",
            "type": "numeric",
            "min": 1,
            "step": 1,
            "default": 100
          }
        },
        "graphs": [
          {}
        ]
      },
      "local_outlier_factor": {
        "name": "Local Outlier Factor",
        "description": "This function filters out outliers using a clustering Local Outlier Factor approach based on k nearest neighbors clustering.",
        "parameters": {
          "number_of_neighbors": {
            "name": "Number of neighbours:",
            "type": "numeric",
            "min": 1,
            "step": 1,
            "default": 20
          }
        },
        "graphs": [
          {}
        ]
      }
    },
    "transformation": {
      "log_transformation": {
        "name": "Log",
        "description": "This function log-transforms intensity\n    DataFrames. Supports log-transformation to the base\n    of 2 or 10.",
        "parameters": {
          "log_base": {
            "name": "Log transformation base:",
            "type": "categorical",
            "categories": [
              "log2",
              "log10"
            ],
            "default": "log2"
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          }
        ]
      }
    },
    "normalisation": {
      "z_score": {
        "name": "Z-Score",
        "description": "A function to run the sklearn StandardScaler class on your dataframe.\n    Normalises the data on the level of each sample.\n    Scales the data to zero mean and unit variance. This is often also\n    called z-score normalisation/transformation.",
        "parameters": {},
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          }
        ]
      },
      "totalsum": {
        "name": "Total Sum",
        "description": "A function to perform normalisation using the total sum\n    of sample intensities on your dataframe.\n    Normalises the data on the level of each sample.\n    Divides each intensity by the total sum of sample intensities.",
        "parameters": {},
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          }
        ]
      },
      "median": {
        "name": "Median",
        "description": "A function to perform a quartile/percentile normalisation on your\n    dataframe. Normalises the data on the level of each sample.\n    Divides each intensity by the chosen intensity quartile of the\n    respective sample. By default, the median (50%-quartile) is used.",
        "parameters": {
          "percentile": {
            "name": "Percentile for normalisation:",
            "type": "numeric",
            "min": 0,
            "max": 1,
            "default": 0.5
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          }
        ]
      },
      "ref_protein": {
        "name": "Protein Reference",
        "description": "A function to perform protein-intensity normalisation in reference\n    to a selected protein on your dataframe.\n    Normalises the data on the level of each sample.\n    Divides each intensity by the intensity of the chosen reference\n    protein in each sample. Samples where this value is zero will be\n    removed and returned separately.",
        "parameters": {
          "reference_protein": {
            "name": "Reference Protein:",
            "type": "protein_dropdown",
            "default": ""
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          }
        ]
      }
    },
    "imputation": {
      "min_value_per_dataset": {
        "name": "Min per Dataset",
        "description": "A function to impute missing values for each protein\n    by taking into account data from the entire dataframe.\n    Sets missing value to the smallest measured value in\n    the dataframe. The user can also assign a shrinking factor to\n    take a fraction of that minimum value for imputation.",
        "parameters": {
          "shrinking_value": {
            "name": "Shrinking Value:",
            "type": "numeric",
            "min": 0,
            "max": 1,
            "default": 1
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          },
          {
            "graph_type_quantites": {
              "name": "Graph type – Imputed Values:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Pie chart"
            }
          }
        ]
      },
      "min_value_per_protein": {
        "name": "Min per Protein",
        "description": "A function to impute missing values for each protein\n    by taking into account data from each protein.\n    Sets missing value to the smallest measured value for each\n    protein column. The user can also assign a shrinking factor to\n    take a fraction of that minimum value for imputation.\n    CAVE: All proteins without any values will be filtered out.",
        "parameters": {
          "shrinking_value": {
            "name": "Shrinking Value:",
            "type": "numeric",
            "min": 0,
            "max": 1,
            "default": 1
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          },
          {
            "graph_type_quantites": {
              "name": "Graph type – Imputed Values:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Pie chart"
            }
          }
        ]
      },
      "min_value_per_sample": {
        "name": "Min per Sample",
        "description": "Sets missing intensity values to the smallest measured value\n    for each sample",
        "parameters": {
          "shrinking_value": {
            "name": "Shrinking Value:",
            "type": "numeric",
            "min": 0,
            "max": 1,
            "default": 1
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          },
          {
            "graph_type_quantites": {
              "name": "Graph type – Imputed Values:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Pie chart"
            }
          }
        ]
      },
      "simple_imputation_per_protein": {
        "name": "SimpleImputer",
        "description": "Imputation methods include imputation by mean, median and\n    mode. Implements the sklearn.SimpleImputer class",
        "parameters": {
          "strategy": {
            "name": "Strategy:",
            "type": "categorical",
            "categories": [
              "mean",
              "median",
              "most_frequent"
            ],
            "default": "mean"
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          },
          {
            "graph_type_quantites": {
              "name": "Graph type – Imputed Values:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Pie chart"
            }
          }
        ]
      },
      "knn": {
        "name": "kNN",
        "description": "A function to perform value imputation based on KNN\n    (k-nearest neighbors). Imputes missing values for each\n    sample based on intensity-wise similar samples.\n    Two samples are close if the features that neither is\n    missing are close.",
        "parameters": {
          "number_of_neighbours": {
            "name": "Number of neighbours:",
            "type": "numeric",
            "min": 1,
            "step": 1,
            "default": 5
          }
        },
        "graphs": [
          {
            "graph_type": {
              "name": "Graph type:",
              "type": "categorical",
              "categories": [
                "Boxplot",
                "Histogram"
              ],
              "default": "Boxplot"
            },
            "group_by": {
              "name": "Group by:",
              "type": "categorical",
              "categories": [
                "None",
                "Sample",
                "Protein ID"
              ],
              "default": "None"
            }
          },
          {
            "graph_type_quantites": {
              "name": "Graph type – Imputed Values:",
              "type": "categorical",
              "categories": [
                "Bar chart",
                "Pie chart"
              ],
              "default": "Pie chart"
            }
          }
        ]
      }
    }
  },
  "data_analysis": {
    "differential_expression": {
      "anova": {
        "name": "ANOVA",
        "description": "A function that uses ANOVA to test the difference between two or more\n    groups defined in the clinical data. The ANOVA test is conducted on\n    the level of each protein. The p-values are corrected for multiple\n    testing.",
        "parameters": {
          "multiple_testing_correction_method": {
            "name": "Multiple Testing Correction Method:",
            "type": "categorical",
            "categories": [
              "Benjamini-Hochberg",
              "Bonferroni"
            ],
            "default": "Benjamini-Hochberg"
          },
          "alpha": {
            "name": "Error Rate (alpha)",
            "type": "numeric",
            "min": 0,
            "max": 1,
            "default": 0.05
          },
          "grouping": {
            "name": "Grouping:",
            "type": "categorical",
            "fill": "metadata_columns",
            "fill_dynamic": [
              "selected_groups"
            ],
            "categories": [],
            "default": "None"
          },
          "selected_groups": {
            "name": "Selected Groups:",
            "type": "categorical",
            "fill": "metadata_column_data",
            "categories": [],
            "default": "None",
            "multiple": true
          },
          "metadata_df": {
            "type": "metadata_df",
            "name": "metadata_df",
            "default": null
          }
        }
      },
      "t_test": {
        "name": "T-Test",
        "description": "A function to conduct a two sample t-test between groups defined in the\n    clinical data. The t-test is conducted on the level of each protein.\n    The p-values are corrected for multiple testing.",
        "parameters": {
          "multiple_testing_correction_method": {
            "name": "Multiple Testing Correction Method:",
            "type": "categorical",
            "categories": [
              "Benjamini-Hochberg",
              "Bonferroni"
            ],
            "default": "Benjamini-Hochberg"
          },
          "alpha": {
            "name": "Error Rate (alpha)",
            "type": "numeric",
            "min": 0,
            "max": 1,
            "default": 0.05
          },
          "fc_threshold": {
            "name": "Fold change threshold",
            "type": "numeric",
            "min": 0,
            "default": 0
          },
          "grouping": {
            "name": "Grouping",
            "type": "categorical",
            "fill": "metadata_columns",
            "fill_dynamic": [
              "group1",
              "group2"
            ],
            "categories": [],
            "default": null
          },
          "group1": {
            "name": "Group 1",
            "type": "categorical",
            "fill": "metadata_column_data",
            "categories": [],
            "default": null
          },
          "group2": {
            "name": "Group 2",
            "type": "categorical",
            "fill": "metadata_column_data",
            "categories": [],
            "default": null
          },
          "metadata_df": {
            "type": "metadata_df",
            "name": "metadata_df",
            "default": null
          }
        }
      },
      "test_named": {
        "name": "this should have a named input",
        "description": "",
        "parameters": {
          "my_named_param": {
            "name": "this should be a named param:",
            "type": "named_output",
            "default": null
          },
          "second_named": {
            "name": "another one:",
            "type": "named_output",
            "default": null
          }
        }
      }
    }
  },
  "data_integration": {}
}
